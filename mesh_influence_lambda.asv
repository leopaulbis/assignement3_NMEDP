function[size_mesh,lambda_val]=mesh_influence_lambda(i,nOfElementNodes,theReferenceElement,degree) %i=mesh fine max num_dep=nombre de neouds pris au d√©part
  
    lambda_val=zeros(1,i);
    size_mesh=zeros(1,i);

    for k=1:i

        fileName=mesh_pyzo(10,'Q',degree,k-1); %creation of the associated mesh 
        load(fileName);

        size_mesh(1,k)=k-1

        T_boun_h1 = Tb_h1(:,[1 end]);
        X_boun_h1 = X(T_boun_h1(:),:);

        T_boun_h2 = Tb_h2(:,[1 end]);
        X_boun_h2 = X(T_boun_h2(:),:);

        nodesCCD=find(ismember(X,X_boun_h1,'rows')|ismember(X,X_boun_h2,'rows')|);%find the nodes on the dirichlet boundary
        uCCD=DirichletValue2(X(nodesCCD,:));

        [K,f]=computeSystemLaplace(X,T,theReferenceElement,@sourceTerm);

        nOfDirichletDOF = length(uCCD); nOfDOF = size(K,1);
        A = spalloc(nOfDirichletDOF,nOfDOF,nOfDirichletDOF);
        A(:,nodesCCD) = eye(nOfDirichletDOF);
        b = uCCD;
        Ktot = [K A'; A spalloc(nOfDirichletDOF,nOfDirichletDOF,0)];
        ftot = [f;b];
        sol = Ktot\ftot;
        u = sol(1:nOfDOF); lambda = sol(nOfDOF+1:end);

        nodesCCD1=find(ismember(X,X_boun_h1,'rows'));
        nodesCCD3=find(ismember(X,X_boun,'rows'));

        lambda2=lambda(numel(nodesCCD1)+1:numel(nodesCCDD2)+numel(nodesCCd));
        s2=sum(lambda2);

        nodesCCD=find(ismember(X,X_boun_h2,'rows'));
        lambda1=lambda(1:numel(nodesCCD));
        s1=sum(lambda1);
        
        nodesCCD3=find(ismember(X,X_boun,'rows'));
        lambda3=lambda(1:numel(nodesCCD));
        s3=sum(lambda3);

        lambda_val(1,k)=s1+s2;


        clear lambda;
        clear X;
        clear T;
        clear K;
        clear f;
    end
end